for(var in seq) {
  //do_something
}
///
while(cond) {
  //do_something
}
///
if(cond) {
  //do_something
}
else {
  //do_something
}
///
ifelse ( cond , x , y)
///
function_name <- function(var) {
  //do_something
  return(var)
}
///
  Rules for writing Identifiers in R :
* Identifiers can be a combination of letters, digits, period (.) and underscore (_).
* It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.
* Reserved words in R cannot be used as identifiers.
///
CHIFFRE : 0|..|9
LETTRE : a|..|z|A|..|Z
NUM : CHIFFRE [ CHIFFRE ]
ID : [ . | epsilon ] [LETTRE [ LETTRE | CHIFFRE | . | _ ]]
AFFECTATION : ID AFFOP EXPR
EXPR : TERM [ARTHOP TERM]
TERM : ID | NUM | ( EXPR )
SI : if ( CONDS ) { INST } [ else { INST } | epsilon ]
BOUCLE : BOUCLE_FOR | BOUCLE_WHILE
BOUCLE_WHILE : while ( COND ) { INST }
BOUCLE_FOR : for ( SEG ) { INST }
CONDS : [!]COND [ || COND | && COND]
COND1 : [!]COND2
COND2 : VAR RELOP VAR
PRINT : print ( VAR )
INPUT : ID <- readline(prompt"//msg")
RELOP : == | != | < | <= | > | >=
AFFOP : <- | <<- | = | -> | ->>
ARTHOP : + | - | * | /
FUNCTION : ID AFFOP function (VAR) { INSTS return(VAR)}
VAL : LOGICAL | NUMERIC | INTEGER | COMPLEX | CHARACTER | RAW | VECTOR | LIST | MATRICE | ARRAY
///
TOKENS :
IF_TOKEN ( if ), ELSE_TOKEN ( else ), REPEAT_TOKEN ( repeat ), WHILE_TOKEN ( while ), FUNCTION_TOKEN ( function ), FOR_TOKEN ( for ), IN_TOKEN ( in ), NEXT_TOKEN ( next ) , BREAK_TOKEN ( break ), TRUE_TOKEN ( true ),
FALSE_TOKEN ( false ) , NULL_TOKEN ( null ), Inf_TOKEN , NaN_TOKEN ,
NA_INTEGER_TOKEN , NA_REAL_TOKEN , NA_COMPLEX_TOKEN , NA_CHARACTER_TOKEN ,
ADD_TOKEN ( + ), SUB_TOKEN ( - ), MULT_TOKEN ( * ), DIV_TOKEN ( / ), EXPONENT_TOKEN ( ^ ), MODULUS_TOKEN ( %% ), INT_DIV_TOKEN ( %/% ),
INF_TOKEN ( < ), SUP_TOKEN ( > ) , INFEG_TOKEN ( <= ), SUPEG_TOKEN ( >= ) , EQUALTO_TOKEN ( == ), NOT_EQUAL_TOKEN ( != ),
LOGICAL_NOT_TOKEN ( ! ), LOGICAL_AND_TOKEN ( && ), LOGICAL_OR_TOKEN ( || ) , ELEMENTWISE_LOGICAL_AND_TOKEN ( & ) , ELEMENTWISE_LOGICAL_OR_TOKEN ( | ) ,
LEFT_ASGN_TOKEN ( <- , <<- , = ), RIGHT_ASGN_TOKEN ( -> , ->> ).
